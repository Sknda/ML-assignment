import csv
from collections import Counter
import matplotlib.pyplot as plt

def encode_column(data, column_index):
    unique = list(sorted(set(row[column_index] for row in data)))
    mapping = {val: i for i, val in enumerate(unique)}
    for row in data:
        row[column_index] = mapping[row[column_index]]
    return mapping

def load_and_preprocess(filename):
    with open(filename, 'r') as file:
        reader = csv.reader(file)
        headers = next(reader)
        data = [row for row in reader]

    for i in [0, 4]:  
        for row in data:
            row[i] = float(row[i])

    gender_map = encode_column(data, 1)
    bp_map = encode_column(data, 2)
    chol_map = encode_column(data, 3)
    prescription_map = encode_column(data, 5)

    for row in data:
        row[5] = int(row[5]) 

    return data, headers, prescription_map

def test_split(index, value, dataset):
    left, right = [], []
    for row in dataset:
        if row[index] <= value:
            left.append(row)
        else:
            right.append(row)
    return left, right

def gini(groups, classes):
    total = sum(len(group) for group in groups)
    gini = 0.0
    for group in groups:
        size = len(group)
        if size == 0:
            continue
        score = 0.0
        labels = [row[-1] for row in group]
        for class_val in classes:
            p = labels.count(class_val) / size
            score += p * p
        gini += (1.0 - score) * (size / total)
    return gini

def get_best_split(dataset):
    class_values = list(set(row[-1] for row in dataset))
    best_index, best_value, best_score, best_groups = None, None, float('inf'), None
    for index in range(len(dataset[0]) - 1):
        for row in dataset:
            groups = test_split(index, row[index], dataset)
            gini_score = gini(groups, class_values)
            if gini_score < best_score:
                best_index, best_value, best_score, best_groups = index, row[index], gini_score, groups
    return {'index': best_index, 'value': best_value, 'groups': best_groups}

def to_terminal(group):
    outcomes = [row[-1] for row in group]
    return Counter(outcomes).most_common(1)[0][0]

def split(node, max_depth, min_size, depth):
    left, right = node['groups']
    del(node['groups'])

    if not left or not right:
        node['left'] = node['right'] = to_terminal(left + right)
        return

    if depth >= max_depth:
        node['left'], node['right'] = to_terminal(left), to_terminal(right)
        return

    if len(left) <= min_size:
        node['left'] = to_terminal(left)
    else:
        node['left'] = get_best_split(left)
        split(node['left'], max_depth, min_size, depth + 1)

    if len(right) <= min_size:
        node['right'] = to_terminal(right)
    else:
        node['right'] = get_best_split(right)
        split(node['right'], max_depth, min_size, depth + 1)

def build_tree(train, max_depth, min_size):
    root = get_best_split(train)
    split(root, max_depth, min_size, 1)
    return root

def predict(node, row):
    if row[node['index']] <= node['value']:
        return predict(node['left'], row) if isinstance(node['left'], dict) else node['left']
    else:
        return predict(node['right'], row) if isinstance(node['right'], dict) else node['right']

def plot_tree(node, depth=0, pos_x=0.5, pos_y=1.0, dx=0.2, dy=0.12, ax=None, parent_pos=None, text=""):
    if ax is None:
        fig, ax = plt.subplots(figsize=(16, 8))
        ax.axis('off')
        plot_tree(node, ax=ax)
        plt.show()
        return

    if isinstance(node, dict):
        label = f'X[{node["index"]}] <= {node["value"]:.2f}'
    else:
        label = f'Class: {node}'

    ax.text(pos_x, pos_y, label, ha='center', bbox=dict(facecolor='lightblue', edgecolor='black'))

    if parent_pos:
        ax.plot([parent_pos[0], pos_x], [parent_pos[1], pos_y], 'k-')
        if text:
            ax.text((parent_pos[0] + pos_x)/2, (parent_pos[1] + pos_y)/2 + 0.015, text, ha='center')

    if isinstance(node, dict):
        next_dx = dx / 1.5
        plot_tree(node['left'], depth + 1, pos_x - dx, pos_y - dy, next_dx, dy, ax, (pos_x, pos_y), "Yes")
        plot_tree(node['right'], depth + 1, pos_x + dx, pos_y - dy, next_dx, dy, ax, (pos_x, pos_y), "No")

if __name__ == "__main__":
    filename = 'drug200_modified.csv'
    dataset, headers, prescription_map = load_and_preprocess(filename)

    print(f"Loaded {len(dataset)} records with {len(headers)} features.")

    tree = build_tree(dataset, max_depth=4, min_size=5)
    plot_tree(tree)

    pred = predict(tree, dataset[0])
    label = [k for k, v in prescription_map.items() if v == pred][0]
    print("Prediction for first row:", label)
